File to document the journey and steps it took to make this application:

1. Create Front and Backend Folders
    a. initialize frontend folder with 'npm create vite@latest'
        select React and plain JavaScript
        'npm install'
        'npm run dev' to start development
    b. initialize backend
        in the root type 'npm init -y'
        install dependencies 'npm install express moongoose jsonwebtoken bcryptjs dotenv cors cookie-parser cloudinary'
        install dev dependencies 'npm i -D nodemon'
        add "type": "module", to package.json under author
        add a server.js to the backend folder
        Replace "test": "echo \"Error: no test specified\" && exit 1" from scripts with "dev": "nodemon backend/server.js"
        Add "start": "node backend/server.js" to scripts with
        Replace "main":"index.js" to "backend/server.js"
        Test server.js by adding console.log("server is running"); and enter npm run dev

2. Backend
    1. Create MongoDB deployment and cluster
        save password to a .env file
        Connect with Drivers
        Make a MONGO_URI variable and set it to the connection string (you can name the db by putting the name before the ?)
        Use dotenv to connect MongoDB
            Create db folder in backend and add a connectMongoDB.js
            Create connectMongoDB function using the env variable
            Add fucntion to the app.listen to connect to MongoDB

    in the backend folder, to make clean code, create 3 folders: routes, models, controllers

    2. Create Models
        backend/models/user.model.js
        Create User Schema with new.mongoose.Schema

    3. Create Auth Routes
        backend/routes/auth.routes.js
        Add routes for auth controllers (/signup, /login, /logout, /authcheck)
        /authcheck will use a middleware called protectRoute that validates the token of the user
        - Create middleware
            backend/middleware/protectRoute.js
            This function has the 'next' param meaning that there will be another function called after
            This function uses cookieParser library, add and use it in server.js
        

    4. Create Auth Controllers
        backend/controllers/auth.controller.js

        
        authCheck
            add and ensure that this route is protected in auth.routes

        
        Signup 
            Email regex validation to ensure email format
            Confirm if email, and username are already taken 
            Check password length
            Hash password using bcryptjs
            Create new user object
            Create generateTokenAndSetCookie function in backend/lib/util to be used in signup
                Generate the token using jwt from jsonwebtoken
                Open bash terminal and genrate a random value using 'openssl rand -base64 32'
                Make a JWT_SECRET variable in the .env file and set it to the output of the previous command
                create res.cookie with maxAge, httpOnly, sameSite, and secure
                secure is for prodcution. Add a NODE_ENV variable to .env file and set it to development environment

            Process:
                1. User sends signup request to our server
                2. A token is created from the request that is encoded with with a secrect key (JWT_SECRET) that was assigned in the .env file
                3. The created token will have a payload (userId), the token will be sent in the cookie back to the client
                4. Now when the user has the token and sends the request, it will send the jwt token in the request
                5. The server will get that token, decode it and validate it, it will confirm the userId
                    Successful: if it validates
                    Error: if it can't validate the jwt token
            
            Test:
                add app.use(express.urlencoded({extended: true}))
                create new workspace in Postman for project
                add 3 collections: AUTH
                in AUTH name the function, since its SIGNUP it will be POST
                Use x-www-form-urlencode
        
        Login
            Find username in DB
            compare password given to the one in DB using bcrypt.compare
                When comaring bcrypt.compare(password, user?.password || "")
                user? if user is undefined, then at least compate it with an empty string that will result in False
            Generate token and set the users cookie

        Logout
            simply set delete the jwt token on browser

    5. Create User Routes
        backend/routes/user.routes.js
        Add routes for user controllers (/profile/:username, /suggested, /follow, /update)
        All of these routes will be using protectRoute middleware because these will be things only a logged in user can do 
    
    6. Create Notificaiton Model
        backend/models/notification.model.js
        
    
    7. Create User Controllers
        backend/controllers/user.controller.js

        getUserProfile
            Get a user profile that is grabbed from the req.params (/profile/:username where username is the param)
            return as a json
        
        folloUnfollowUser
            Get a user id from req.params (/follow/:id where id is the param)
            set the selectedUser to the user's id
            set currentUser by id given from protectRoute
            ensure user isn't attempting to follow/unfollow themselves
            ensure users exist

            set a check if the user is already following the selected user
            If following:     remove the currentUser out of the list of selectedUser's own followers
                              remove selectedUser from the users list of currentUser's following
            If not following: add selectedUser to list of currentUser's followers
                              add currentUser to selectedUser's following
            
            send notificaiton for follow
        
        getSuggestedUsers
            get a list of users that you are alreayd following
            make a sample size of 10 users that are in the db
            filter the users to only include ones that you arent following
            only show the first 4
            dont show their passwords
            return list of 4 users that you do not follow but are in the db

        updateUser
            ability to change fullName, email, password, coverimg, and profrleimg

            Need to check currentPassowrd and newPassword
                ensure both values are filled and not just one
                bcrypt.compare the currenPassword and the newPassword
                Check length
                salt, rehash, and change new password
            
            coverImg and profileImg
                Both are being store using cloudinart API, ensure to add name, api key and secret to .env and config them in server.js
                destroy the image if it already exist in user to avoid taking up to much space

    5. Create Post Routes
        backend/routes/post.routes.js
        Add routes for post controllers (/create, /like, /comment, /)
        All of these routes will be using protectRoute middleware because these will be things only a logged in user can do 
    
    6. Create Post Model
        backend/models/post.model.js
        
    7. Create Post Controllers
        backend/controllers/post.controller.js

        createPost
            take in text or img, check if they are provided
            check if user exists and is auth
            if img is provided upload it to cloudinary

        deletePost
            find post by id
            Check if you are owner of post
            if img was in post, delte it from cloudinary

        likePost
            find post by id
            check if user already liked the post
            if liked:
                remove like from post and remove like from user's likePost
            if not like:
                add like to posts.likes and add like to users
        
        commentOnPost
            get and make sure their is text
            get the post id and user that is commenting 
            check if post exists
            push comment to post.comments

        getLikedPosts
            get userId
            find posts that user has liked, populate the user without the password and with the comments, without the password
        
        getFeed
            get userId
            get a list of the users following
            get posts ordered from recently created

        getAllPost
            get all post recently created and their user without the password

        getUserPosts
            get all post from a specifc username

3. Frontend
    Install Tailwind CSS with Vite
    https://tailwindcss.com/docs/guides/vite#react
        npm install -D tailwindcss postcss autoprefixer
        npx tailwindcss init -p

    Install daisyUI
    https://daisyui.com/docs/install/

    in the .eslintrc.cjs file
        add 'react/prop-types': 'off'
        We will initially use boilerplate code for some components

    Install react router and icons:
    npm install react-router-dom react-icons

    Wrap BrowserRouter around App in main.jsx:
    <BrowserRouter>
      <App />
    </BrowserRouter>

    Add Routes and Route from react-router-dom to App.jsx:
    <div className="flex max-w-6xl mx-auto">
      <Routes>
        <Route path='/' element={<HomePage />}/>
        <Route path='/login' element={<LoginPage />}/>
        <Route path='/signup' element={<SignUpPage />}/>
      </Routes>
    </div>

    Create folders and pages as jsx files: 
        frontend/src/pages/auth/signup/SignUpPage.jsx
        frontend/src/pages/auth/login/LoginPage.jsx
        frontend/src/pages/home/HomePage.jsx
    Import them into App.jsx

    Use ES7+ React/Redux/React-Native Snippets to auto complete pages
    typing in rafce auto completes to: 
        import React from 'react'
        const SignUpPage = () => {
        return (
            <div>SignUpPage</div>
        )
        }
        export default SignUpPage

    Add svg file that will be used in SignUpPage
    frontend/src/components/svgs/X.jsx

    SignUpPage
        using https://react-icons.github.io/react-icons/
        import MdOutlineMail, FaUser, MdPassword, MdDriveFileRenameOutline

        Handle form data by using useState. Ensure that the inputs "name" tag is set to its corresponding name below:
            const [formData, setFormData] = useState({
                email: "",
                username: "",
                password: "",
                fullName: "",
            });
        
        Ensure inputs have "onChange" set to the following function to assign it properly
            handleInputChange = (event) => {
                setFormData({
                    ...formData,
                    [event.target.name]: event.target.value,
                });
            };

    LoginPage
        Same concepts as SignUpPage
        Just take in username and password
    
    HomePage
        Home page has some common components, components that are used throught the app
        frontend/src/components/common/Sidebar.jsx
        frontend/src/components/common/Posts.jsx
        frontend/src/components/common/RightPanel.jsx
        Common Components are not wrapped with Routes in App.jsx

        Sidebar
            Common Component
            handles Home Notifications Profile and account Links
            data is hardcoded for now but we will connect the user as the Auth user

        dummy data
            Since the backend isnt connected I created a src/utils/db/dummy.js
            this holds fake Post data that will be incorporated int he Posts.jsx

        RightPanel
            Handels the suggested users
            Uses RightPanelSkeleton to handle loading effect
            frontend/src/components/skeletons/RightPanelSkeleton.jsx
        
        CreatePost
            frontend/src/pages/home/CreatePost.jsx
            Handles the Create Post feature that allows the user to make a post on the website
            Posts can handle text and img, has a useState for both
            handleSubmit function that shows an alert
            handleImgChange read the uploaded image file and sets the img stat to its data url
            User profile image with placeholder if unavailable
            form with onSubmit={handleSubmit}
            textArea that holds the value={text}, onChange={(e)=>setText(e.target.value)}
        
        Posts (diffrent from Post)
            fronted/src/common/Posts.jsx
            Handles the structure of each Post and its skeleton

            PostSkeleton
                frontend/src/components/skeletons/PostSkeleton.jsx
                Handles the loading of the posts
            
            Post
                useState on comment, setComment

4. Connecting Api to frontend
    TanStack Query (react-query)
    https://tanstack.com/query/latest/docs/framework/react/installation

    'npm run dev' on two seperate terminals, one inside the root for the backend and one in the frontend

    in frontend install tanstack 'npm i @tanstack/react-query'

    Initialize QueryClient in main.jsx
    Wrap App
        <QueryClientProvider client={queryClient}>
            <App />
        </QueryClientProvider>

    Add Proxy
        in the vite.config.js add
        proxy: {
            '/api': {
                target: 'http://localhost:5000',
                changeOrigin: true
            }
        }
        This configuration proxies any request that starts with /api and this in target URL in front http://localhost:5000
        changeOrigin is necessary to ensure cookies and other request headers are sent correctly when the target URL has a different domain or port
        By changing the Origin header, changeOrigin: true allows your frontend and backend to communicate smoothly during development,
        even though they're running on different servers. This simplifies development workflow by allowing you to make API calls from your frontend
        code without needing to modify URLs or handle CORS (Cross-Origin Resource Sharing) concerns.

        maintains a separation between your frontend and backend development environments. Changes you make to one won't directly affect the other,
        promoting modularity and testability.

    react-hot-toast
        This is a library we are going to use to throw errors or add toasts
        https://react-hot-toast.com/docs
        in the front end npm install react-hot-toast
        add <Toaster /> to App.jsx

    SignUpPage
        import { useMutation, useQuery } from '@tanstack/react-query';
        useMutation is to change data
        useQuery is to pull data

        Remove the hardcoded isError

        const { mutate, isError, isPending, error } = useMutation();
        (you can name the mutate function the action that its preforming mutate:signUpUser for readable code)
            mutatationFn modifies the mutate()
                fetch("/api/auth/signup")
                we clarify its a post and the headers and stringify the JSON res
                handle res and data error
                return data
                if catch error, throw a toast
                Put the mutate(formData) in the handleSubmit fn
            isError was replaced by the hardcoded one
            isPending is places in the signup btn
                {isPending ? "Signing up..." : "Sign up"}

    Login
        identical to SignUpPage, just takes in username and password

    Logout/ Sidebar.jsx
        same as signup without the headers
        add OnClick() to logout icon (BiLogOut)

    Protect Routes
        The next step is needed to protect the routes from users that are not logged in
        in auth.routes.js I created a function called authCheck to ensure they are logged in
        in App.jsx we will need to use tanstack's  useQuery to pull data
        we set quertKey: ["authUser"] so that this fn can be used throughout our app
        we set queryFn to fetch("/api/auth/authCheck")

        in each route that can only be accessed by a signed in user:
            element={authUser ? <HomePage /> : <Navigate to='/login'></Navigate>
            ensure user is authenticated if not go to LoginPage
            if user is already authenticated then just take them to home page

        in the main.jsx file we want to check the QueryClient's refetchOnWindowsFocus to False
        This makes it so that when you switch through tabs it doesn't refetch

    LoginPage
        OnSuccess we need to be able to refetch the user and invalidate queries
        we use useQueryClient from tanstack and initialize it
        queryClient.invalidateQueries({ queryKey: ["authUser"]});
    
    Logout/ Sidebar
        OnSuccess Invalidate the query
        delete the hardcoded data
        We also want to set the Sidebars data to whover is logged in
        we use useQuery({queryKey: ["authUser"]}) to get the auth user, set the value to data and rename it authUser
        change the hardcoded data to authUser for readable code
    
    Only show sidebar and righpanel if user is in
      {authUser && <Sidebar />}
      {authUser && <RightPanel />}


    Posts.jsx
        We now want to useQuery to pull the posts
        Create a switch that chooses the endpoint according to the feed that is selected
        we create a new queryKey called "posts"
        delete the dummy data
        we then want to add the feedType to the post in HomePage.jsx
        we have to also call the refetch, isRefetching in useQuery
        We use a useEffect() hook to trigger a refetch of data whenever the feedType prop changes

    Post.jsx
        add the authUser to Posts.jsx
        ensuer that isMyPost is set to the authUsers id
        useMutation for postdeletion
        use isPending to display loading spinner under FaTrash icon
        Add queryClient and onSuccess invalidate query on posts
        
    CreatePost.jsx
        get authUser from useQuery
        initialize queryClient
        mutate a createPost fn
        onSuccess invalidate query, setText("") and setImg(null)
        add createPost to handleSubmit
        handle isError and error in the mutation to show at bottom
        backend/server app.use(express.json({ limit: "3mb" }));
            a limit should be added for the allowed amount of data that a img can take up
            this needs to be added to prevent DoS (Denial of Service) attack
                Where an attacker would send a large file with the purpose of making it crash

    RightPanel for Suggest users
        useQuery to fetch suggested users
        replace data with the suggested users
    
    Follow Unfollow functionality
        Create a hooks folder in the frontend/src
        useFollow
            useMutation and useQueryClient
            mutation follows on userId
            onSuccess
                invalidateQueries on suggested users to remove them from suggested users now that theyre followed
                invalidateQueries on authUser to update follow count
                wrap them in a Promise.all function to ensure that they succeed
            return follow, isPending

        add useFollow hook in RightPanel

    Like functionality
        mutate likePost on postId
        onSuccess we are not going to want to invalidate the query to update
        this is because onSuccess it will refetch all the posts again and reload
        instead I updated the cahce directly for that post
            change the backend on post.controller.js
                right now if we unlike a post it just deletes the id of the current user from post
                we need to just delete the userId from the array and return updated likes
            we use queryClient.setQueryData on posts, get the oldData, find the post that was selected then just update its likes
    
    





    

    








            



